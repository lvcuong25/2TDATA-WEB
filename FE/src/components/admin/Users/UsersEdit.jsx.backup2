import React, { useState, useEffect } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { Button, Input, Form, Spin, Select, Switch, Tag, Space, Card, Tooltip, Modal, Table, Popconfirm } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined, ClockCircleOutlined } from '@ant-design/icons';
import { toast } from 'react-toastify';
import { useForm, Controller } from "react-hook-form";
import instance from "../../../utils/axiosInstance";
import { useMutation, useQuery } from "@tanstack/react-query";
import { uploadFileCloudinary } from "../../admin/libs/uploadImageCloud";

const { Option } = Select;

const UsersEdit = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [infoForm] = Form.useForm();
    
    // States
    const [selectedServices, setSelectedServices] = useState([]);
    const [avatar, setAvatar] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [editingInfo, setEditingInfo] = useState(null);
    const [assignableRoles, setAssignableRoles] = useState([]);
    const [availableSites, setAvailableSites] = useState([]);
    const [showSiteSelect, setShowSiteSelect] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [currentUserRole, setCurrentUserRole] = useState(null);
    const [currentUserSiteId, setCurrentUserSiteId] = useState(null);

    const { control, handleSubmit, setValue, reset, watch, formState: { errors } } = useForm();
    const selectedRole = watch('role');

    // Get current user info from localStorage or API
    useEffect(() => {
        const getCurrentUser = async () => {
            try {
                const { data } = await instance.get('/auth');
                if (data?.data) {
                    setCurrentUserRole(data.data.role);
                    setCurrentUserSiteId(data.data.site_id?._id || data.data.site_id);
                }
            } catch (error) {
                console.error('Error getting current user:', error);
                // Fallback to localStorage if needed
                const storedUser = localStorage.getItem('currentUser');
                if (storedUser) {
                    const user = JSON.parse(storedUser);
                    setCurrentUserRole(user.role);
                    setCurrentUserSiteId(user.site_id);
                }
            }
        };
        getCurrentUser();
    }, []);

    // Query để lấy dữ liệu user
    const { data: userData, isLoading: isFetchingUser } = useQuery({
        queryKey: ['user', id],
        queryFn: async () => {
            const { data } = await instance.get(`/user/${id}`);
            return data.data;
        },
    });

    // Query để lấy danh sách dịch vụ
    const { data: servicesData } = useQuery({
        queryKey: ['services'],
        queryFn: async () => {
            const { data } = await instance.get('/service');
            return data.data;
        },
    });

    // Query để lấy danh sách sites
    const { data: sitesData } = useQuery({
        queryKey: ['sites'],
        queryFn: async () => {
            const { data } = await instance.get('/sites');
            return data.data;
        },
        enabled: currentUserRole === 'super_admin'
    });

    // Set initial form values from userData
    useEffect(() => {
        if (userData) {
            let siteId = userData.site_id?._id || userData.site_id;
            
            // For site_admin/admin: they can only edit users from their own site
            if (currentUserRole && (currentUserRole === 'site_admin' || currentUserRole === 'admin')) {
                if (siteId && currentUserSiteId && siteId !== currentUserSiteId) {
                    toast.error("Bạn không có quyền chỉnh sửa user từ site khác!");
                    navigate("/admin");
                    return;
                }
                // For site_admin/admin, always use their site_id for new users or users without site
                if (!siteId) {
                    siteId = currentUserSiteId;
                }
            }
            
            reset({
                email: userData.email,
                name: userData.name,
                phone: userData.phone,
                role: userData.role,
                site_id: siteId,
                active: userData.active,
                service: userData.service?.map(s => ({
                    id: s.service?._id || s.service,
                    status: s.status
                })) || [],
                address: userData.address
            });
            if (userData.avatar) setAvatar(userData.avatar);
            
            // Only show site select if current user is super_admin
            if (currentUserRole === 'super_admin') {
                setShowSiteSelect(userData.role !== 'super_admin');
            }
        }
    }, [userData, reset, currentUserRole, currentUserSiteId, navigate]);

    // Set available roles based on current user role
    useEffect(() => {
        if (currentUserRole) {
            setAssignableRoles(getAssignableRoles(currentUserRole));
        }
    }, [currentUserRole]);

    // Show/hide site select based on selected role
    useEffect(() => {
        if (selectedRole) {
            setShowSiteSelect(currentUserRole === 'super_admin' && selectedRole !== 'super_admin' && availableSites.length > 0);
        }
    }, [selectedRole, currentUserRole, availableSites]);

    // Set available sites
    useEffect(() => {
        if (sitesData) {
            setAvailableSites((Array.isArray(sitesData) ? sitesData : []).map(site => ({
                value: site._id,
                label: site.name,
                domains: site.domains
            })));
        } else if (currentUserSiteId) {
            // If not super admin, only show their own site
            setAvailableSites([{
                value: currentUserSiteId,
                label: 'Site hiện tại',
                domains: []
            }]);
        }
    }, [sitesData, currentUserSiteId]);

    const mutation = useMutation({
        mutationFn: async (userData) => {
            const { data } = await instance.put(`/user/${id}`, userData);
            return data;
        },
    });

    const uploadMutation = useMutation({
        mutationFn: uploadFileCloudinary,
        onSuccess: (data) => {
            setValue('avatar', data);
            setAvatar(data);
            toast.success("Ảnh đại diện đã được cập nhật!");
        },
        onError: (error) => {
            console.error("Error uploading image:", error);
            toast.error("Không thể tải ảnh lên");
        },
    });

    // Add information mutation
    const addInfoMutation = useMutation({
        mutationFn: async (values) => {
            const response = await instance.post(`/user-info`, {
                user: id,
                ...values
            });
            return response.data;
        },
        onSuccess: () => {
            toast.success("Thông tin đã được thêm thành công!");
            window.location.reload();
        },
        onError: (error) => {
            toast.error("Không thể thêm thông tin: " + error.message);
        }
    });

    // Update information mutation
    const updateInfoMutation = useMutation({
        mutationFn: async ({ id: infoId, values }) => {
            const response = await instance.put(`/user/information/${infoId}`, {
                user: id,
                ...values
            });
            return response.data;
        },
        onSuccess: () => {
            toast.success("Thông tin đã được cập nhật!");
            setEditingInfo(null);
            window.location.reload();
        },
        onError: (error) => {
            toast.error("Không thể cập nhật thông tin: " + error.message);
        }
    });

    // Delete information mutation
    const deleteInfoMutation = useMutation({
        mutationFn: async (infoId) => {
            await instance.delete(`/user-info/${infoId}`);
        },
        onSuccess: () => {
            toast.success("Thông tin đã được xóa!");
            window.location.reload();
        },
        onError: (error) => {
            toast.error("Không thể xóa thông tin: " + error.message);
        }
    });

    const onSubmit = (data) => {
        if (isSubmitting) {
            console.log("Already submitting, prevented double submit");
            return;
        }
        setIsSubmitting(true);
        setIsLoading(true);

        const updateData = {
            ...data,
            avatar
        };

        if (data.password && data.password.trim() !== '') {
            updateData.password = data.password;
        }
        
        // Ensure site_id is included for non-super_admin users
        if (currentUserRole !== 'super_admin' && !updateData.site_id) {
            updateData.site_id = currentUserSiteId;
        }

        mutation.mutate(updateData, {
            onSuccess: (response) => {
                toast.success("Thông tin người dùng đã được cập nhật thành công!");
                navigate("/admin");
            },
            onError: (error) => {
                console.error("Error updating user:", error);
                toast.error(error.response?.data?.message || "Không thể cập nhật thông tin người dùng");
            },
            onSettled: () => {
                setIsLoading(false);
                setIsSubmitting(false);
            }
        });
    };

    const uploadImage = (file) => {
        if (file) {
            uploadMutation.mutate(file);
        }
    };

    const handleDeleteInfo = (infoId) => {
        deleteInfoMutation.mutate(infoId);
    };

    const handleEditInfo = (info) => {
        setEditingInfo(info);
        infoForm.setFieldsValue({
            key: info.key,
            value: info.value
        });
    };

    const handleModalOk = () => {
        infoForm.validateFields().then(values => {
            if (editingInfo) {
                updateInfoMutation.mutate({ id: editingInfo._id, values });
            } else {
                addInfoMutation.mutate(values);
            }
            infoForm.resetFields();
        });
    };

    const handleModalCancel = () => {
        setEditingInfo(null);
        infoForm.resetFields();
    };

    const getStatusTag = (status) => {
        const config = {
            waiting: { color: 'orange', icon: <ClockCircleOutlined />, text: 'Chờ duyệt' },
            approved: { color: 'green', icon: <CheckCircleOutlined />, text: 'Đã duyệt' },
            rejected: { color: 'red', icon: <CloseCircleOutlined />, text: 'Từ chối' }
        };
        
        const statusConfig = config[status] || config.waiting;
        
        return (
            <Tag icon={statusConfig.icon} color={statusConfig.color}>
                {statusConfig.text}
            </Tag>
        );
    };

    const infoColumns = [
        {
            title: 'Key',
            dataIndex: 'key',
            key: 'key',
            width: '30%'
        },
        {
            title: 'Value',
            dataIndex: 'value',
            key: 'value',
            width: '50%',
            render: (text) => (
                <div style={{ 
                    maxWidth: '300px', 
                    whiteSpace: 'normal',
                    wordBreak: 'break-word'
                }}>
                    {text}
                </div>
            )
        },
        {
            title: 'Hành động',
            key: 'action',
            render: (_, record) => (
                <Space size="middle">
                    <Button 
                        icon={<EditOutlined />} 
                        onClick={() => handleEditInfo(record)}
                        size="small"
                    />
                    <Popconfirm
                        title="Bạn có chắc chắn muốn xóa thông tin này?"
                        onConfirm={() => handleDeleteInfo(record._id)}
                        okText="Có"
                        cancelText="Không"
                    >
                        <Button 
                            danger 
                            icon={<DeleteOutlined />}
                            size="small"
                        />
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    if (isFetchingUser) {
        return (
            <div className="flex justify-center items-center h-screen">
                <Spin size="large" />
            </div>
        );
    }

    const getAssignableRoles = (currentUserRole) => {
        const roleHierarchy = {
            'super_admin': ['super_admin', 'site_admin', 'site_moderator', 'admin', 'member'],
            'site_admin': ['site_moderator', 'admin', 'member'],
            'site_moderator': ['member'],
            'admin': ['member'],
            'member': []
        };
        
        return roleHierarchy[currentUserRole] || [];
    };

    return (
        <div className="p-4 bg-white rounded-lg shadow">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold">Sửa thông tin người dùng</h1>
                <Link to="/admin">
                    <Button type="default">Quay lại</Button>
                </Link>
            </div>
            <Form onFinish={onSubmit} layout="vertical">
                <div className="flex flex-col md:flex-row gap-6">
                    <div className="md:w-1/3">
                        <Card className="text-center">
                            <div className="w-32 h-32 mx-auto mb-4">
                                <img
                                    src={avatar || 'https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg'}
                                    alt="Avatar"
                                    className="w-full h-full rounded-full object-cover"
                                />
                            </div>
                            <div className="mb-4">
                                <input
                                    type="file"
                                    accept="image/*"
                                    onChange={(e) => uploadImage(e.target.files[0])}
                                    className="hidden"
                                    id="avatar-upload"
                                />
                                <label htmlFor="avatar-upload">
                                    <Button 
                                        as="span" 
                                        loading={uploadMutation.isPending}
                                        className="cursor-pointer"
                                    >
                                        Thay đổi ảnh
                                    </Button>
                                </label>
                            </div>
                            {avatar && (
                                <Button 
                                    type="text" 
                                    danger 
                                    onClick={() => setAvatar(null)}
                                >
                                    Xóa ảnh
                                </Button>
                            )}
                        </Card>
                    </div>

                    <div className="md:w-2/3">
                        <Card>
                            <Form.Item 
                                label="Email" 
                                required
                                validateStatus={errors.email ? "error" : ""}
                                help={errors.email?.message}
                            >
                                <Controller
                                    name="email"
                                    control={control}
                                    rules={{ 
                                        required: 'Email không được bỏ trống',
                                        pattern: {
                                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                                            message: 'Email không hợp lệ'
                                        }
                                    }}
                                    render={({ field }) => (
                                        <Input 
                                            {...field} 
                                            placeholder="Nhập email"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Tên" 
                                required
                                validateStatus={errors.name ? "error" : ""}
                                help={errors.name?.message}
                            >
                                <Controller
                                    name="name"
                                    control={control}
                                    rules={{ required: 'Tên không được bỏ trống' }}
                                    render={({ field }) => (
                                        <Input 
                                            {...field} 
                                            placeholder="Nhập tên"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Số điện thoại"
                                validateStatus={errors.phone ? "error" : ""}
                                help={errors.phone?.message}
                            >
                                <Controller
                                    name="phone"
                                    control={control}
                                    render={({ field }) => (
                                        <Input 
                                            {...field} 
                                            placeholder="Nhập số điện thoại"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Mật khẩu mới"
                                validateStatus={errors.password ? "error" : ""}
                                help={errors.password?.message || "Để trống nếu không muốn thay đổi mật khẩu"}
                            >
                                <Controller
                                    name="password"
                                    control={control}
                                    render={({ field }) => (
                                        <Input.Password 
                                            {...field} 
                                            placeholder="Nhập mật khẩu mới"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Địa chỉ"
                                validateStatus={errors.address ? "error" : ""}
                                help={errors.address?.message}
                            >
                                <Controller
                                    name="address"
                                    control={control}
                                    render={({ field }) => (
                                        <Input 
                                            {...field} 
                                            placeholder="Nhập địa chỉ"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Vai trò" 
                                required
                                validateStatus={errors.role ? "error" : ""}
                                help={errors.role?.message}
                            >
                                <Controller
                                    name="role"
                                    control={control}
                                    rules={{ required: 'Vai trò không được bỏ trống' }}
                                    render={({ field }) => (
                                        <Select 
                                            {...field} 
                                            placeholder="Chọn vai trò"
                                            onChange={(value) => {
                                                field.onChange(value);
                                                
                                                // If changing to super_admin, clear site_id
                                                if (value === 'super_admin') {
                                                    setValue('site_id', null);
                                                }
                                                
                                                // Show/hide site select based on role
                                                setShowSiteSelect(currentUserRole === 'super_admin' && value !== 'super_admin' && availableSites.length > 0);
                                            }}
                                        >
                                            {(assignableRoles || []).map(role => (
                                                <Option key={role} value={role}>
                                                    {role === 'super_admin' && 'Super Admin'}
                                                    {role === 'site_admin' && 'Site Admin'}
                                                    {role === 'site_moderator' && 'Site Moderator'}
                                                    {role === 'admin' && 'Admin'}
                                                    {role === 'member' && 'Member'}
                                                </Option>
                                            ))}
                                        </Select>
                                    )}
                                />
                            </Form.Item>

                            {/* Display current site for non-super_admin */}
                            {currentUserRole !== 'super_admin' && userData?.site_id && (
                                <Form.Item label="Site">
                                    <div className="p-2 bg-gray-100 rounded">
                                        {userData.site_id.name || 'Site hiện tại'}
                                        {userData.site_id.domains && userData.site_id.domains.length > 0 && (
                                            <span className="text-gray-500 text-sm ml-2">
                                                ({userData.site_id.domains[0]})
                                            </span>
                                        )}
                                    </div>
                                </Form.Item>
                            )}
                            
                            {/* Site selection - only show for super_admin */}
                            {showSiteSelect && (
                                <Form.Item 
                                    label="Site" 
                                    required
                                    validateStatus={errors.site_id ? "error" : ""}
                                    help={errors.site_id?.message}
                                >
                                    <Controller
                                        name="site_id"
                                        control={control}
                                        rules={{ 
                                            required: selectedRole !== 'super_admin' ? 'Site không được bỏ trống' : false 
                                        }}
                                        render={({ field }) => (
                                            <Select 
                                                {...field}
                                                placeholder="Chọn site"
                                            >
                                                {(availableSites || []).map(site => (
                                                    <Option key={site.value} value={site.value}>
                                                        {site.label}
                                                        {site.domains && site.domains.length > 0 && (
                                                            <span className="text-gray-500 text-sm ml-2">
                                                                ({site.domains[0]})
                                                            </span>
                                                        )}
                                                    </Option>
                                                ))}
                                            </Select>
                                        )}
                                    />
                                </Form.Item>
                            )}

                            <Form.Item label="Trạng thái">
                                <Controller
                                    name="active"
                                    control={control}
                                    render={({ field }) => (
                                        <Switch 
                                            {...field} 
                                            checked={field.value}
                                            checkedChildren="Hoạt động"
                                            unCheckedChildren="Ngừng"
                                        />
                                    )}
                                />
                            </Form.Item>

                            <Form.Item 
                                label="Dịch vụ"
                                validateStatus={errors.service ? "error" : ""}
                                help={errors.service?.message}
                            >
                                <Controller
                                    name="service"
                                    control={control}
                                    render={({ field }) => (
                                        <Select
                                            {...field}
                                            mode="multiple"
                                            placeholder="Chọn dịch vụ"
                                            value={field.value?.map(s => s.id) || []}
                                            onChange={(selectedIds) => {
                                                const newServices = selectedIds.map(id => {
                                                    const existingService = field.value?.find(s => s.id === id);
                                                    return existingService || { id, status: 'waiting' };
                                                });
                                                field.onChange(newServices);
                                            }}
                                        >
                                            {(servicesData || []).map(service => (
                                                <Option key={service._id} value={service._id}>
                                                    {service.name}
                                                </Option>
                                            ))}
                                        </Select>
                                    )}
                                />
                            </Form.Item>

                            {/* Display service status */}
                            {(watch('service') || [])?.length > 0 && (
                                <div className="mb-4">
                                    <label className="text-sm font-medium text-gray-700">Trạng thái dịch vụ:</label>
                                    <div className="mt-2 space-y-2">
                                        {(watch('service') || []).map((serviceItem) => {
                                            const service = servicesData?.find(s => s._id === serviceItem.id);
                                            return service ? (
                                                <div key={serviceItem.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                                                    <span>{service.name}</span>
                                                    {getStatusTag(serviceItem.status)}
                                                </div>
                                            ) : null;
                                        })}
                                    </div>
                                </div>
                            )}
                        </Card>

                        <Card className="mt-4" title="Thông tin bổ sung">
                            <div className="mb-4">
                                <Button 
                                    type="dashed" 
                                    onClick={() => setEditingInfo({})}
                                    icon={<PlusOutlined />}
                                >
                                    Thêm thông tin
                                </Button>
                            </div>
                            
                            <Table 
                                dataSource={userData?.information || []}
                                columns={infoColumns}
                                rowKey={(record, idx) => `${record._id}_${idx}`}
                                pagination={false}
                            />
                        </Card>

                        <div className="mt-4 flex justify-end">
                            <Button
                                type="primary"
                                htmlType="submit"
                                loading={isLoading || mutation.isPending || uploadMutation.isPending}
                                disabled={isLoading || mutation.isPending || uploadMutation.isPending}
                                className="bg-blue-500"
                            >
                                {isLoading || mutation.isPending ? "Đang Cập nhật..." : "Cập nhật"}
                            </Button>
                        </div>
                    </div>
                </div>
            </Form>

            {/* Information Modal */}
            <Modal
                title={editingInfo?._id ? "Sửa thông tin" : "Thêm thông tin mới"}
                open={!!editingInfo}
                onOk={handleModalOk}
                onCancel={handleModalCancel}
                confirmLoading={addInfoMutation.isPending || updateInfoMutation.isPending}
            >
                <Form
                    form={infoForm}
                    layout="vertical"
                >
                    <Form.Item
                        name="key"
                        label="Key"
                        rules={[{ required: true, message: 'Vui lòng nhập key' }]}
                    >
                        <Input style={{ fontSize: '16px' }} />
                    </Form.Item>
                    <Form.Item
                        name="value"
                        label="Value"
                        rules={[{ required: true, message: 'Vui lòng nhập value' }]}
                    >
                        <Input.TextArea rows={6} style={{ fontSize: '16px' }} />
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default UsersEdit;
