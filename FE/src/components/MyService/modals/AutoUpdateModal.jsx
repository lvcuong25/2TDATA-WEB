import { useState } from "react";
import { Modal, Switch, Select, TimePicker, DatePicker, Tag, message } from "antd";
import { ClockCircleOutlined } from "@ant-design/icons";
import dayjs from "dayjs";
import instance from "../../../utils/axiosInstance-cookie-only";
import { formatIntervalDisplay, formatNextUpdateTime, calculateNextUpdateTime } from "../utils/serviceUtils";

const AutoUpdateModal = ({ 
  visible, 
  onClose, 
  selectedService, 
  onSaveSuccess 
}) => {
  const [autoUpdateSettings, setAutoUpdateSettings] = useState({
    enabled: false,
    scheduleType: 'daily',
    scheduleTime: null,
    scheduleDate: null,
    scheduleDays: [],
  });

  const handleSave = async () => {
    if (!selectedService) return;

    try {
      let requestData = {
        enabled: autoUpdateSettings.enabled
      };

      if (autoUpdateSettings.enabled) {
        if (!autoUpdateSettings.scheduleTime) {
          message.error('Vui l√≤ng ch·ªçn th·ªùi gian c·∫≠p nh·∫≠t');
          return;
        }

        requestData.scheduleType = autoUpdateSettings.scheduleType;
        requestData.scheduleTime = autoUpdateSettings.scheduleTime.format('HH:mm');
        
        if (autoUpdateSettings.scheduleType === 'once' && !autoUpdateSettings.scheduleDate) {
          message.error('Vui l√≤ng ch·ªçn ng√†y c·∫≠p nh·∫≠t');
          return;
        }
        
        if (autoUpdateSettings.scheduleType === 'once') {
          requestData.scheduleDate = autoUpdateSettings.scheduleDate.format('YYYY-MM-DD');
        }
        
        if (autoUpdateSettings.scheduleType === 'weekly' && autoUpdateSettings.scheduleDays.length === 0) {
          message.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng√†y trong tu·∫ßn');
          return;
        }
        
        if (autoUpdateSettings.scheduleType === 'weekly') {
          requestData.scheduleDays = autoUpdateSettings.scheduleDays;
        }

        requestData.nextUpdateAt = calculateNextUpdateTime(autoUpdateSettings);
        requestData.clearInterval = true;
        requestData.interval = null;
      } else {
        requestData.clearSchedule = true;
        requestData.clearInterval = true;
        requestData.scheduleType = null;
        requestData.scheduleTime = null;
        requestData.scheduleDate = null;
        requestData.scheduleDays = null;
        requestData.interval = null;
      }

      console.log('üöÄ SENDING REQUEST:', requestData);
      const response = await instance.put(`/requests/${selectedService._id}/auto-update`, requestData);
      console.log('üì• RESPONSE:', response.data);

      message.success(response.data.message);
      onClose();
      onSaveSuccess();
      
    } catch (error) {
      console.error('Error saving auto update settings:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi l∆∞u c√†i ƒë·∫∑t');
    }
  };

  const handleOpen = () => {
    if (selectedService) {
      setAutoUpdateSettings({
        enabled: selectedService.autoUpdate?.enabled || false,
        scheduleType: selectedService.autoUpdate?.scheduleType || 'daily',
        scheduleTime: selectedService.autoUpdate?.scheduleTime ? dayjs(`2000-01-01 ${selectedService.autoUpdate.scheduleTime}`) : null,
        scheduleDate: selectedService.autoUpdate?.scheduleDate ? dayjs(selectedService.autoUpdate.scheduleDate) : null,
        scheduleDays: selectedService.autoUpdate?.scheduleDays || []
      });
    }
  };

  return (
    <Modal
      title="C√†i ƒë·∫∑t c·∫≠p nh·∫≠t t·ª± ƒë·ªông"
      open={visible}
      onOk={handleSave}
      onCancel={onClose}
      afterOpenChange={handleOpen}
      okText="L∆∞u"
      cancelText="H·ªßy"
      width={500}
    >
      {selectedService && (
        <div className="space-y-4">
          <div>
            <h4 className="font-medium mb-2">D·ªãch v·ª•: {selectedService.service?.name}</h4>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">
              B·∫≠t c·∫≠p nh·∫≠t t·ª± ƒë·ªông
            </label>
            <Switch
              checked={autoUpdateSettings.enabled}
              onChange={(checked) => setAutoUpdateSettings(prev => ({ ...prev, enabled: checked }))}
              checkedChildren="B·∫≠t"
              unCheckedChildren="T·∫Øt"
            />
          </div>

          {autoUpdateSettings.enabled && (
            <div>
              <label className="block text-sm font-medium mb-2">
                C√†i ƒë·∫∑t l·ªãch tr√¨nh c·∫≠p nh·∫≠t
              </label>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    Lo·∫°i l·ªãch tr√¨nh
                  </label>
                  <Select
                    value={autoUpdateSettings.scheduleType}
                    onChange={(value) => setAutoUpdateSettings(prev => ({ ...prev, scheduleType: value }))}
                    style={{ width: '100%' }}
                    options={[
                      { value: 'daily', label: 'H√†ng ng√†y' },
                      { value: 'weekly', label: 'H√†ng tu·∫ßn' },
                      { value: 'monthly', label: 'H√†ng th√°ng' },
                      { value: 'once', label: 'M·ªôt l·∫ßn duy nh·∫•t' }
                    ]}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    Th·ªùi gian c·∫≠p nh·∫≠t
                  </label>
                  <TimePicker
                    value={autoUpdateSettings.scheduleTime}
                    onChange={(time) => setAutoUpdateSettings(prev => ({ ...prev, scheduleTime: time }))}
                    format="HH:mm"
                    style={{ width: '100%' }}
                    placeholder="Ch·ªçn th·ªùi gian"
                  />
                </div>

                {autoUpdateSettings.scheduleType === 'once' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Ng√†y c·∫≠p nh·∫≠t
                    </label>
                    <DatePicker
                      value={autoUpdateSettings.scheduleDate}
                      onChange={(date) => setAutoUpdateSettings(prev => ({ ...prev, scheduleDate: date }))}
                      style={{ width: '100%' }}
                      placeholder="Ch·ªçn ng√†y"
                      disabledDate={(current) => current && current > dayjs().endOf('day')}
                    />
                  </div>
                )}

                {autoUpdateSettings.scheduleType === 'weekly' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Ch·ªçn ng√†y trong tu·∫ßn
                    </label>
                    <Select
                      mode="multiple"
                      value={autoUpdateSettings.scheduleDays}
                      onChange={(values) => setAutoUpdateSettings(prev => ({ ...prev, scheduleDays: values }))}
                      style={{ width: '100%' }}
                      placeholder="Ch·ªçn c√°c ng√†y"
                      options={[
                        { value: 1, label: 'Th·ª© 2' },
                        { value: 2, label: 'Th·ª© 3' },
                        { value: 3, label: 'Th·ª© 4' },
                        { value: 4, label: 'Th·ª© 5' },
                        { value: 5, label: 'Th·ª© 6' },
                        { value: 6, label: 'Th·ª© 7' },
                        { value: 0, label: 'Ch·ªß nh·∫≠t' }
                      ]}
                    />
                  </div>
                )}

                {autoUpdateSettings.scheduleTime && (
                  <div className="mt-2 text-sm text-gray-500">
                    L·ªãch tr√¨nh: {formatIntervalDisplay(
                      null, 
                      autoUpdateSettings.scheduleType, 
                      autoUpdateSettings.scheduleTime.format('HH:mm')
                    )}
                  </div>
                )}
              </div>
            </div>
          )}

          {autoUpdateSettings.enabled && (
            <div className="bg-gray-50 p-3 rounded">
              <h5 className="font-medium mb-2">Th√¥ng tin hi·ªán t·∫°i:</h5>
              <div className="text-sm space-y-1">
                <div>Tr·∫°ng th√°i: <Tag color="green">ƒêang b·∫≠t</Tag></div>
                <div>
                  Lo·∫°i: <Tag color="blue">L·ªãch tr√¨nh c·ªë ƒë·ªãnh</Tag><br/>
                  L·ªãch tr√¨nh: {formatIntervalDisplay(
                    null,
                    autoUpdateSettings.scheduleType,
                    autoUpdateSettings.scheduleTime ? autoUpdateSettings.scheduleTime.format('HH:mm') : null
                  )}
                </div>
                {selectedService.autoUpdate?.lastUpdateAt && (
                  <div>C·∫≠p nh·∫≠t cu·ªëi: {new Date(selectedService.autoUpdate.lastUpdateAt).toLocaleString('vi-VN')}</div>
                )}
                {selectedService.autoUpdate?.nextUpdateAt && (
                  <div>C·∫≠p nh·∫≠t ti·∫øp theo: {formatNextUpdateTime(selectedService.autoUpdate.nextUpdateAt)}</div>
                )}
              </div>
            </div>
          )}

          <div className="text-xs text-gray-500">
            <p>‚Ä¢ H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ªçi c√°c link c·∫≠p nh·∫≠t theo l·ªãch tr√¨nh ƒë√£ ch·ªçn</p>
            <p>‚Ä¢ Ch·ªâ √°p d·ª•ng cho c√°c d·ªãch v·ª• c√≥ link c·∫≠p nh·∫≠t</p>
            <p>‚Ä¢ <strong>L·ªãch tr√¨nh c·ªë ƒë·ªãnh:</strong> C·∫≠p nh·∫≠t v√†o th·ªùi gian c·ª• th·ªÉ m·ªói ng√†y/tu·∫ßn/th√°ng</p>
            <p>‚Ä¢ <strong>H√†ng ng√†y:</strong> C·∫≠p nh·∫≠t v√†o th·ªùi gian ƒë√£ ch·ªçn m·ªói ng√†y</p>
            <p>‚Ä¢ <strong>H√†ng tu·∫ßn:</strong> C·∫≠p nh·∫≠t v√†o th·ªùi gian ƒë√£ ch·ªçn v√†o c√°c ng√†y ƒë∆∞·ª£c ch·ªçn trong tu·∫ßn</p>
            <p>‚Ä¢ <strong>M·ªôt l·∫ßn:</strong> C·∫≠p nh·∫≠t m·ªôt l·∫ßn duy nh·∫•t v√†o ng√†y v√† th·ªùi gian ƒë√£ ch·ªçn</p>
            <p>‚Ä¢ B·∫°n c√≥ th·ªÉ t·∫Øt b·∫•t k·ª≥ l√∫c n√†o</p>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default AutoUpdateModal;
